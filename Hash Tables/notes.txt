Hash Table:
  Hash tables are used to store key-value pairs. Like arrays but the keys
  are not ordered. Unlike arrays, hash tables are fast for all of the 
  following operations: finding values, adding new values, and removing.
  Nearly every programming language has some sort of hash table data structure.
  Because of their speed, hash tables are very commonly used.


  Dealing with collisions:
    Even with a large array and a great hash function, collisions are
    inevitable. There are many strategies for dealing with collisions.

    Seperate chaining:
      With a seperate chaining, at each index in the array we store
      values using a more sophisticated data structure(array or linkedlist).
      This allows you to store multiple key-value pairs at the same index.

    Linear probing:
      With linear probing, when you find a collision, you search through
      the array to find the next empty slot. Unlike with seperate chaining
      this allows you to store a single key-value at each index.


  Recap:
    Hash tables are collections of key-value pairs. Hash tables can find
    values quickly given a key. Hash tables can add new key-values quickly.
    Hash tables store data in a large array, and work by hashing the keys.
    A good hash should be fast, distribute keys uniformly, and be deterministic.
    Seperate chaining and linear probing are 2 strategies used to deal with
    2 keys that hash to the same index.