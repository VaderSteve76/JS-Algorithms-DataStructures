Quick Sort:
  Like merge sort, exploitshe fact that arrays of 0 or 1 elements are already sorted.
  Works by selecting one element(called pivot) and finding the index where the pivot
  should end up in the sorted array. Once the pivot is positioned appropriately,
  quick sort can be applied on either side of the pivot.

Pivot Helper:
  In order to implement Merge Sort, it's useful to first implement a function responsible
  for arranging elements in an array on either side of the pivot. Given an array, this
  helper function should designate an element as the pivot. It should then rearrange
  elements in the array so that all values less than the pivot are moved to the left
  and all values higher than the pivot are moved to the right. The order of the 
  elements on either side of the element doesn't matter. The helper should do this 
  in place and not create a new array. When complete the helper should return the index.

    Picking a pivot:
      The runtime of Quick Sort depends on how you select the pivot. Ideally the pivot
      should be chosen so that it's roughly he median value in the data set to be sorted.

    Pivot Pseudocode:
      It will help accept 3 arguments, an array, start index and an end index
      (these can default to 0 and the array length -1). Grab the pivot from the start.
      Store the current pivot index in a variable, where the pivot should end up. 
      Loop through the array from the start to the end. If the pivot is greater than
      the current element, increment the pivot index variable then swap the current 
      element with the element at the pivot index. Swap the starting element with 
      the pivot index then return the pivot index.