Doubly Linked List:
  Same as a singly linked list except has a pointer in both directions
  pointing to the prev node and next node. Uses more memory because of
  pointers in both directions.


Push:
  Adding a node to the end of the doubly linked list.

  Push Pseudocode:
    Create a new node with the value passed to the function.
    If the head property is null set the head and tail to be
    the newly created node. If not, set the next property on
    the tail to be that node. Set the previous property on 
    the newly created node to be the tail. Set the tail to be
    the newly created node. Increment the length. Return the 
    doubly linked list.


Pop:
  Removing a node from the end of the doubly linked list.

  Pop Pseudocode:
    If there is no head, return undefined. Store the current tail
    in a variable to return later. If the length is 1, set the head
    and tail to be null. Update the tail to be the previous node.
    Set the newTails next to be null. Decrement the length. Return
    the value removed.