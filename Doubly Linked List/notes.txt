Doubly Linked List:
  Same as a singly linked list except has a pointer in both directions
  pointing to the prev node and next node. Uses more memory because of
  pointers in both directions.


Push:
  Adding a node to the end of the doubly linked list.

  Push Pseudocode:
    Create a new node with the value passed to the function.
    If the head property is null set the head and tail to be
    the newly created node. If not, set the next property on
    the tail to be that node. Set the previous property on 
    the newly created node to be the tail. Set the tail to be
    the newly created node. Increment the length. Return the 
    doubly linked list.


Pop:
  Removing a node from the end of the doubly linked list.

  Pop Pseudocode:
    If there is no head, return undefined. Store the current tail
    in a variable to return later. If the length is 1, set the head
    and tail to be null. Update the tail to be the previous node.
    Set the newTails next to be null. Decrement the length. Return
    the value removed.


Shift:
  Removes a node from the beginning of the doubly linked list.

  Shift Pseudocode:
    If the length is 0, return undefined. Store the current head property
    in a variable(oldHead). If the length is 1, set the head & tail to be
    null. Update the head to be the next of the old head. Set the head's
    previous property to be null. Set the old head's next to be null.
    Decrement the length. Return old head.


UnShift:
  Adding a node to the beginning of the doubly linked list.

    UnShift Pseudocode:
      Create a new node with the value passed to the function. If the length
      is 0 set the head & tail to be the new node. Otherwise, set the previous
      property on the head of the list to be the new node and set the next 
      property on the new node to be the head property. Update the head to be
      the new node. Increment the length. Return the list.


Get:
  Accessing a node in a doubly linked list by its position.

  Get Pseudocode:
    If the index is less than 0 or greater or equal to the length return null.
    If the index is less than  or equal to half the length of the list loop 
    through the list starting from the head and loop towards the middle, return
    the node once it is found. If the index is greater than half the length of 
    the list loop through the list starting from the tail and loop towards the
    middle, return the node once it is found.


Set:
  Changing the value of a node in it's position in the doubly linked list.

  Set Pseudocode:
    Create a variable which is the result of the get method at the index
    passed to the function. If the get method returns a valid node, set
    the value of that node to be the value passed to the function. Return
    true, otherwise return false.


Insert:
  Adding a node in a doubly linked list by a certain position.

  Insert Pseudocode:
    If the index is less than 0 or greater than or equal to the length
    return false. If the index is 0, unshift. If the index is the same as
    the length, push. Use get method to access the index -1. Set the next
    and previous properties on the correct nodes to link everything together.
    Increment the length. Return true.


Remove:
  Removing a node in a doubly linked list by a certain position.

  Remove Pseudocode:
    If the index is less than 0 or greater than or equal to the length
    return undefined. If the index is 0, shift. If the index is the same 
    as the length -1, pop. Use get method to retrieve the item to be removed.
    Update the next & prev properties to remove the found node from the list.
    Set next & prev to null on the found node. Decrement the length. Return
    the removed node.