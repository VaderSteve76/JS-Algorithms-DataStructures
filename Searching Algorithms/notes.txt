Searching Algorithms:
  The simplest way to search for a value is to look at the data
  and to check if it's the value we are looking for. Javascript has 
  search methods built in ie. indexOf, includes, find, & findIndex

Linear Search:
  1. This function accepts an array and a value
  2. Loop through the array and check if the value is equal to what you're looking for
  3. If it is return the index at which the element is found
  4. If the value is never found return -1

Binary Search:
  1. Binary search is a much faster from of search
  2. Rather than eliminating one element at a time, you can eliminate
  half of the remaining elements at a time
  3. Binary only works on sorted arrays

    Create an example function:
      This function accepts a sorted array and a value
      Create a left pointer at the start of the array, and a right one at the end
      While the left pointer comes before the right pointer:
        1. Create a pointer in the middle
        2. If you find the value you want, return the index
        3. If the value is too small, move the left pointer up
        4. If the value is too large, move the right pointer down
        5. If you never find the value, return -1


Naive String Search:
  1. Suppose you want to count the number of times a smaller 
  string appears in a longer string
  2. A straightforward approach involves checking 
  pairs of characters individually

    Create an example:
      Create a function that takes 2 strings,takes the longer 
      string and the pattern you are looking for. Loop over the longer string,
      loop over the shorter string, if the characters don't match break out of
      the inner loop. If the characters do match, keep going. If you complete
      the inner loop and find a match, increment the count of matches