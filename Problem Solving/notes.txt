Objective:
  1. Define what an algorithm is

  2. Devise a plan to solve algorithms

  3. Compare and contrast problem solving 
     patterns including frequency counters
     two pointer problems and divide & conquer


Definition of alogrithm:
  A process or set of steps to accomplish a task

How to i,prove:
  1. Devise a plan
  2. Master common problem solving patterns


Understand the problem:
  1. Can I restate the problem in my own words?
  2. What are the inputs that go into the problem?
  3. What are the outputs that should come from the solution?
  4. Can the outputs be determined from the inputs?
     In other words, do I have enough info to solve the
     problem?
  5. How should I label the important pieces of data
     that are part of the problem?


Explore Examples:
  1. Start with simple Examples
  2. Progress to more complex Examples
  3. Explore examples with empty inputs
  4. Explore examples with invalid inputs


Refactoring:
  1. Can you check the result?
  2. Can you derive the result differently?
  3. Can you understand it at a glance?
  4. Can you use the result or method for some other problem?
  5. Can you improve the performance of your solution?
  6. Can you think of other ways to refactor?
  7. How have other people solved this problem?


Frequency counters:
  Uses objects or sets to collect values/frequencies of values
  Can often avoid the need for nested loops or O(n^2) operations
  with arrays/strings

  Example:
    Write a function called same, which accepts 2 arrays.
    the function should return true if every value in the array
    has it's corresponding value squared in the 2nd array.
    The frequency of values must be the same.
    same([1,2,3], [4,1,9]) //true
    same([1,2,3], [1,9]) //false
    same([1,2,1], [4,4,1]) //false